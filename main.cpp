#include <iostream>
#include <string>
#include <Windows.h>
#include <mmsystem.h>
#include <thread>
#include <experimental/filesystem>
#include <atomic>

#pragma comment(lib, "winmm.lib")

std::atomic<bool> terminateThreads(false);

void ChangeBackground() {
    std::experimental::filesystem::path currentPath = std::experimental::filesystem::current_path();
    std::wstring file = (currentPath / L"rick.jpg").wstring();

    // Change the background
    int ret = SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, (void*)file.c_str(), SPIF_UPDATEINIFILE);
    if (ret == 0) {
        DWORD error = GetLastError();
        std::cerr << "cant change background-picture!" << std::endl;
    }
}

void PlayMusic() {
    PlaySound(TEXT("rickroll.wav"), NULL, SND_SYNC);
}

void LockScreen() {
    // kanskje fjern?
    while (!terminateThreads) {
        LockWorkStation();
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}

void MaxVolume() {
    while (!terminateThreads) {
        keybd_event(VK_VOLUME_UP, 0, 0, 0);
        keybd_event(VK_VOLUME_UP, 0, KEYEVENTF_KEYUP, 0);
        // time.sleep???
    }
}

void MaxVolumeOnce() {
    for (int i = 0; i < 100; ++i) {
        keybd_event(VK_VOLUME_UP, 0, 0, 0); 
        keybd_event(VK_VOLUME_UP, 0, KEYEVENTF_KEYUP, 0);
    }
}

void DayReminder() {
    const char* url = "index.html";
    ShellExecuteA(NULL, "open", url, NULL, NULL, SW_SHOWNORMAL);
}

void TimerNeverGonnaGiveYouUp() {
    std::this_thread::sleep_for(std::chrono::seconds(200));

    // Set the flag to terminate all threads
    terminateThreads = true;
}

void OpenRickyRoll() {
    const char* url = "https://www.youtube.com/watch?v=uHgt8giw1LY";
    ShellExecuteA(NULL, "open", url, NULL, NULL, SW_SHOWNORMAL);
}

int main() {
	HWND hWnd = GetConsoleWindow();
    ShowWindow(hWnd, SW_HIDE); // hide console

    terminateThreads = false; // Reset the termination flag for each iteration
    std::thread musicThread(PlayMusic);
	DayReminder();
    std::this_thread::sleep_for(std::chrono::seconds(1));
    std::thread maxVolumeThread(MaxVolume);
    ChangeBackground();
    std::this_thread::sleep_for(std::chrono::seconds(1));

    std::thread lockScreenThread(LockScreen);
    std::thread timerThread(TimerNeverGonnaGiveYouUp);

    // Wait for the timer thread to finish
    timerThread.join();

    // Wait for other threads to finish
    musicThread.join();
    lockScreenThread.join();
    maxVolumeThread.join();

    // Sleep for 10 minutes before the next iteration
    while (true) {
        std::this_thread::sleep_for(std::chrono::minutes(2));
        MaxVolumeOnce();
        OpenRickyRoll();
    }

    return 0;
}
